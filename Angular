***********INSTALAR ANGULAR************
Angular es un framework de trabajo
1. Tener instalado node y tambien npm
2. ejecutar $>npm install -g @angular/cli -> Instalará la última versión de angular
3. $>ng version -> Muestra la versión de angular que se instaló.
4. $>npm list -g @angular/cli -> Verificamos las versiónes instaladas
**********Verificar que este configurado las variables de entorno.*********
5. En variables del sistema, buscar la variable PATH y agregar C:\Users\Pvargas\AppData\Roaming\npm aceptar y guardar.
6. $>npm uninstall -g @angular/cli  -> Desinstala en angular
7. $npm cache clean --force -> Limpiar cache para evitar conflictos con versiones antiguas
**********INSTALAR VErSION ESPECÍFICA********
8. $>npm install -g @angular/cli@16.2.16
**********Crear un proyecto**********
9. $>ng new my-app -> Si no reconoce el comando se puede anteponer (npx)
**********CREAR MÓDULOS***********
10. $>ng generate module moduloName -> si solo ng no funciona anteponer (npx)
10.1. $>ng g m  moduleName -> si solo ng no funciona anteponer (npx)
**********CREAR COMPONENTES*********
11. $>ng generate component componentName -> si solo ng no funciona anteponer (npx)
11.1. $>ng g c componentName
*********Inicializar un proyecto***************
12. npm start -> Debemos estar situados dentro del proyecto.


**************CONCEPTOS****************
MODULOS: Es un mecanismo de organización y encapsulación que se usa para agrupar componentes, directivas, pipes.
Los módulos ayudab a dividir una aplicación en partes mas pequeñas y manejables, lo que facilita el desarrollo, la mantenibilidad y escalabilidad.
  Unidades organizativas.
  Encapsulan funcionalidads.
  Dividen la aplicación.
  Importan/exportan elementos.
  Registran proveedores.
  Evitan conflictos de nombres.
COMPONENTES: Es fundamental para la creación de interfaces de usuario(UI). Son responsable de definir como se vé y se comporta una parte
específica de la interfaz de usuario de la aplicación
Cada componete representa un elemento visual o funcional de una página web(Ej. header, footer, form, ul, etxc.).
Los componentes son unidades funcionales que se ven y se reutilizan.
Los componentes están compuestos de cuatro archivos
  1.El componente(nombreDelComponente.ts)
  2.El HTML de la plantilla(nombreDelComponente.html)
  3.El CSS de estillos(nombreDelComponente.css)
  4.El test, archivo de prueba(nombreDelComponente.spec.ts)

  Bloques de UI.
  Definen vistas y lógica.
  Usan clases TypeScript.
  Tienen plantillas HTML.
  Son reactivos.
  Altamente reutilizables.
  Se encapsulan.
  Jerarquia de la UI.
ENLACES DE DATOS: Es la capacidad de conectar y sincronizar los datos entre modelo y la vista.
Es una caracteristica fundamental que permite que los cambios del modelo se reflejen en la vista y viceversa de manera automática.
  Conexión Automática: Sincroniza datos entre modelo y vista.
  Unidireccional: Los cambios del modelo se reflejan en la vista.
  Bidireccional: Los cambios en la vista actualizan el modelo.
  Reactivo: Usa observables para actualizar en tiempo real.
  Simplifica Interacción: Facilita la reacción de aplicaciones interactivas.
  Automatiza Actualizaciones: Cambios se reflejan sin intervención manual.
METADATA: Se refiere a la información adicional que se proporciona mediante decoradores en clases que definen componentes, módulos, servicios y otras paartes de una aplicación.
La metadata se usa para configurar y personalizar el comportamiento de la aplicación.
Los decoradores @Component, @NgModule, @Injectable, entre otros se usan para adjuntar esta en metadatas a las clases.
INTERCAMBIO DE INFORMACIÓN NETRE COMPONENTES: Los componentes se comunica mediante la entrada y salida.
Un padre pasa datos a su hijo mediante propiedades de entrada, y un hijo emite eventos mediante propiedades de salida.

  INPUT
    1.HIJO: puede definir propiedades de entrada utilizando @Input() -> esta propiedad representa los datos que se recibirán.
      //Componente hijo
      Ej: @Input() datoEntrada: string;
    2.PADRE: puede vincular los datos a la propiedad de entrada del HIJO mediante corchetes
      //Componente padre
      Ej: <app-hijo [datoEntrada]="valorDesdePadre" />
    3.PADRE: cuando el valor de la propiedad de entrada PADRE cambia => Angular actualiza la propiedad de entrada en el HIJO
      Ej: //Componente Padre
          valorDesdePadre = "Hola mundo";
    4.HIJO: hace uso de la propiedad de entrada como cualquier propiedad local
      Ej: //Template componente hijo
          <p>{{ datoEntrada }}</p>

  OUTPUT
    1.HIJO: se usa @Output y EventEmiter para comunicar un componente hijo y su componente padre.
      //Componente Hijo
      Ejm: @Output() messageEvent = new EventEmitter<string>();
          message:string ='';
          sendMessage(){
            this.messageEvent.emit(this.message);
          }
    2.HIJO: archivo HTML del componente hijo. Incluye un input para que el usuario ingrese contenido.
      Utiliza ngModel para vinvular el input con pa propiedad message del componente.ts
      //Template componente hijo
      Ej:<div>
            <label for="childInput">Mensaje:</label>
            <input id="childInput" [(ngModel)]="message" />
            <button (clcik)="sendMessage()">Enviar Mensaje</button>
          </div>
    3.PADRE: el componente padre tiene la propiedad "receivedMessage" que almacena mensajes recibidos del componente hijo
      //Component Padre
      Ej:
        receivedMessage: string = '';
        reseiveMessage(message: string){
          this.receivedMessage = message;
        }
    4.PADRE: plantilla componente padre, utiliza el evento "messageEvent", para llamar al método "receiveMessage", cuando se emite un
      mensaje desde el componente hijo.
      //Template componente padre
      Ej:
        <div>
          <app-hijo (messageEvent)="receiveMessage($event)" />
          <p>Mensaje recibido en el padre: {{ receivedMessage }}
        </div>





