JAVA
Java Compiler -> Un compilador es un programa que traduce el código escrito en un lenguaje de programación humano legible a un código de bajo nivel entendido por computadora.
Archivo Binario -> También conocido como ejecutable. Es el resultado de compilar el código fuente de un programa. Este archivo corre dentro del JVM

JRE -> Java Runtime Environment : Software que proporciona la plataforma necesaria para ejecutar aplicaciones JAVA
JDK -> Java Development Kit : Son herramientas que permite que los programadores puedan crear software en lenguaje JAVA

Variable -> Es un contenedor que almacena datos.
  boolean = 1 o 0 / 'true' o 'false'
  int = Numero entero. Ejm. int edad = 35;
  long = Numero muy grande. Ejm long distanciaTierraSol = 149000000000L;
  float = Para numeros decimales pequeños y medianos Ejm. float numeroDecimal = 6.9f;
  double = Números decimales grandes. Ejm. double numeroDecGrande = 79798787465.46546546D;
  char = Letra o caracter, solo una. Ejm. char = 'a';
  String = Cadena de caracteres. Siempre entre comilla doble. Siempre empieza con mayuscula. Ejm. String saludo = "Hola Mundo";
  byte = Va de 128 a -128. Ejm. byte codigo = 123;
  short = Numero corto que va del 32000 al -32000(Referencial). Ejm. short phone = 311586;

Variable Final o Constante -> Es un valor que no puede cambiar una vez que ha sido asignado su valor inicial.
  Ejemplo:
    final int ci = 654789;//Nunca cambiara este valor
    final float gravedad = 6.9f;

Variables Primitivas -> Empiezan con minuscula. El valor que le demos será el valor que tiene.
  Las variables primitivas no pueden ser NULAS.

Objetos -> Empiezan con mayúscula. Guarda la referencia no guarda el valor como en las primitivas.
  Ejm.
    int a = 5; //Tiene el valor de 5
    int b = a; //Tiene el valor de 5
    Integer c = 10; //Guarda la referencia a 10
    Integer d = c; //Guarda la referencia a 10

Null -> Es un valor que puede ser asignado a cualquier tipo mientras no sea de tipo primitivo.
  int a = null; X
  Integer a = null; (Correcto)

Operaciones
  Suma -> Se una el caracter (+). Las variables a sumar deben ser número. Caso contrario los concatena.
    int a = 5, b = 5; => a+b=10
    int a = 5; String b = "cinco" => a+b="5cinco";
  Resta -> Se usa el caracter (-). {LM que suma}
  Multiplicación -> Se usa el caracter (*). Solo funciona con números.
    int a = 5, b = 5; => a*b=25
  Divición -> Se usa el caracter (/). Su resultado generalmente en un float.
    int a = 10, b = 5; => float c = a/b=2
  Módulo -> Se usa el caracter(%). Es el residuo de una divición
    int a = 10, b = 5; => int c = a%b=0

Operaciones Conbinadas
  int a = 5; int b = 2;
  a += b; =>  a=7
  a -= b; =>  a=3
  a *= b; =>  a=10
  a /= b; => float a=2.5
  a %= b; =>  a=1
  a++; => a=6;
  a--; => a=4;

Operaciones Complejas
  int a = 5;
  int b = 10;

  1.- El minimo de 5 numeros => Math.min(a,b); = a
  2.- El valor absoluto de un numero => Math.abs(5); = a (Positivo)
  3.- La potencia de un numero => Math.pow(a,2); => a*a = 25 (El retorno es de tipo double)
  4.- La raiz cuadrada de un numero => Math.srqt(25); = 5 (El retorno es de tipo double)
  5.- Redondeo de un numero => Math.round(3.7); = 4 (Redondeo hacia arriba)
  6.- Redondeo hacia abajo => Math.floor(3.7); = 3 (Redondeo hacia abajo)
  7.- Redondeo hacia arriba => Math.ceil(3.7): = 4 (Redondeo hacia arriba)
  8.- PI => Math.PI=3.14.15.16.......

Operaciones Lógicas
  Operador de Igualdad de datos primitivas (==)
    boolean iguales = a==b; => false
  Operador de Igualdad de objetos (equals())
    String c = "Hola";
    String d = "hola";
    boolean igualdad = c.equals(d); => false
  Operador de Diferente datos primitivos (!=)
  Operador de Comparación menor que (<)
  Operador de Comparación menor igual que (<=)
  Operador de Comparación mayor que (>)
  Operador de Comparación mayor igual que (>=)
  Operador AND o (&&)
  Operador OR o (||)
  Operador Negacion o ( ! )

Estucturas condicionales
    if
    else if
    else
    switch  (variable){
      case 1 -> {
        //Hacer algo
      }
      case 2 -> {
        //hacer algo
      }
      default -> {
        //hacer algo
      }
    }

Estuctura de Carpets y Paquetes
  /src/ -> Es la carpeta donde se aloja el código

  Package -> Es una forma de organizar y estructurar clases realacionadas dentros de un proyecto. Es un identificador de nuestro programa.

POO -> La programación orientada a objetos es un paradigma de programación, donde los programas se estructuran al rededor de los objetos.
Objeto -> Tiene atributos(Datos) y métodos(Funciones).
Clase -> Un objeto es una instancia única de una clase que contiene daos y métodos.
  Una clase representa una entidad del mundo real o un concepto abstracto y encapsula su estado y comportamiento.
Instanciar -> Instnciar es crear un objeto a partir de una clase.La instancia permite acceder y utilizar sus caracteristicas y funcionalidades.
Argumentos -> Los argumentos son valores que se pasan a una función para proporcionar datos de entrada necesarios para su ejecución.
Field -> Un field es una variable que almacena datos específicos para cada instancia de esa clase.
Constructor -> Un constructor es un método especial que se usa para inicializar objetos de una clase. Se invoca automaticamente cuando se crea una instancia de la clase
  y se utiliza para asignar valores iniciales a los atributos del objeto.
Método -> Conjunto de insrucciones específicas, devuelven valores cuando son invocados desde otras partes del programa.
Modificadores de Acceso
  -private -> Solo los miembros de la clase pueden acceder y modificar las variables.
  -protected -> Solo pueden acceder los que se encuentren dentro del mismo paquete o los que hereden de la clase.
  -public -> Se puede acceder desde cualquier parte del programa.
  -static -> Palabra clave que se puede usar con los modificadores de acceso
Herencia -> Es un mecanisno que permite heredar atributos y métodos de una clase a otra.
Clase Abstracta -> Es una clase que no se puede instaciar de manera directa. Se utilizan para definir una estructura común como base para ser heredada.
Método Abstracto -> Es un método que pertenece a una clase abstracta
Tipos de clases
  -Interface -> Es una estructura que define un conjunto de métodos que una clase debe implementar. Una clase puede implementar múltiples clases.
  -Enums -> Un tipo de clase que define un conjunto fijo de constantes con nombre.
  -Record -> Un tipo de clase recientemente implementado, sirven para guardar valores inmutables.
Casting -> Es el proceso de convertir un objeto de un tipo dato a otro  tipo de dato compatible.
Argumento de tipo -> Los argumentos de tipo son parámetros que se utilizan para definir el tipo de datos que una funcion o clase puede aceptar como argumento o devolver.














  
